import android.content.Intent
import android.os.Bundle
import android.text.InputType
import android.widget.Button
import android.widget.EditText
import android.widget.ImageButton
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity

class cambiarcontra2 : AppCompatActivity() {
    private lateinit var usernameEditText: EditText
    private lateinit var passwordEditText: EditText
    private lateinit var confirmPasswordEditText: EditText
    private lateinit var togglePasswordButton: ImageButton
    private lateinit var toggleConfirmPasswordButton: ImageButton
    private lateinit var toggleantiPasswordButton: ImageButton
    private var isPasswordVisible = false
    private var isConfirmPasswordVisible = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_cambiarcontra2)

        // Inicializa los EditTexts
        usernameEditText = findViewById(R.id.username2)
        passwordEditText = findViewById(R.id.password2)
        confirmPasswordEditText = findViewById(R.id.password3)

        // Establece el inputType para que las contraseñas estén ocultas al inicio
        usernameEditText.inputType =
            InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD
        passwordEditText.inputType =
            InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD
        confirmPasswordEditText.inputType =
            InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD

        // Inicializa los botones para mostrar/ocultar contraseñas
        togglePasswordButton = findViewById(R.id.btn_show_password2)
        toggleConfirmPasswordButton = findViewById(R.id.btn_show_password3)
        toggleantiPasswordButton = findViewById(R.id.btn_show_password4)

        togglePasswordButton.setOnClickListener {
            isPasswordVisible =
                togglePasswordVisibility( usernameEditText, togglePasswordButton, isPasswordVisible)
        }

        toggleConfirmPasswordButton.setOnClickListener {
            isConfirmPasswordVisible = togglePasswordVisibility(  passwordEditText,
                toggleConfirmPasswordButton,
                isConfirmPasswordVisible
            )
        }
        toggleantiPasswordButton.setOnClickListener {
            isConfirmPasswordVisible = togglePasswordVisibility(  confirmPasswordEditText,
                toggleantiPasswordButton,
                isConfirmPasswordVisible
            )
        }

        // Botón para volver a la MainActivity
        val per = findViewById<ImageButton>(R.id.icon_two)
        per.setOnClickListener {
            // Crear un Intent para iniciar inicio
            val intent = Intent(this, perfil::class.java)
            startActivity(intent) // Inicia la nueva actividad
        }

        // Cambia el ID del botón a inicio_button4
        val cam = findViewById<Button>(R.id.inicio_button4)
        cam.setOnClickListener {
            // Mostrar un mensaje de contraseña guardada
            Toast.makeText(this, "Contraseña guardada", Toast.LENGTH_SHORT).show()

            // Limpiar los campos de EditText
            usernameEditText.text.clear()
            passwordEditText.text.clear()
            confirmPasswordEditText.text.clear()

            cam.postDelayed({
                val intent = Intent(this, perfil::class.java)
                startActivity(intent)
            }, 1000)
        }
    }

    private fun togglePasswordVisibility(
        editText: EditText,
        button: ImageButton,
        isVisible: Boolean
    ): Boolean {
        // Guarda la posición del cursor antes de cambiar el inputType
        val cursorPosition = editText.selectionStart

        if (isVisible) {
            // Ocultar contraseña
            editText.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD
            button.setImageResource(R.drawable.ver) // Cambia el ícono a "cerrado"
        } else {
            // Mostrar contraseña
            editText.inputType =
                InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD
            button.setImageResource(R.drawable.no__ver) // Cambia el ícono a "abierto"
        }

        // Restaurar la posición del cursor
        editText.setSelection(cursorPosition)

        // Retorna el nuevo estado de visibilidad
        return !isVisible
    }
}
