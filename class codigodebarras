package com.example.fresh_track

import android.app.Activity
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.provider.MediaStore
import android.widget.ImageButton
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import android.Manifest
import android.graphics.Bitmap
import android.util.Log


class codigodebarras : AppCompatActivity() {
    private val REQUEST_CAMERA_PERMISSION = 100
    private val REQUEST_IMAGE_CAPTURE = 1

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_codigodebarras)

        // Configura el botón que abrirá la cámara
        val cameraButton = findViewById<ImageButton>(R.id.cam)
        cameraButton.setOnClickListener {
            checkCameraPermission() // Verificar permisos y abrir la cámara
        }

        // Otras configuraciones de botones
        val men = findViewById<ImageButton>(R.id.icon_two)
        men.setOnClickListener {
            val intent = Intent(this, registro_inventario::class.java)
            startActivity(intent)
        }

        val per = findViewById<ImageButton>(R.id.icon_one)
        per.setOnClickListener {
            val intent = Intent(this, perfil::class.java)
            startActivity(intent)
        }
    }

    // Función para verificar permisos de cámara
    private fun checkCameraPermission() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            != PackageManager.PERMISSION_GRANTED) {
            // Si no está concedido, solicita el permiso
            ActivityCompat.requestPermissions(this,
                arrayOf(Manifest.permission.CAMERA),
                REQUEST_CAMERA_PERMISSION)
        } else {
            // Si el permiso ya está concedido, abrir la cámara
            openCamera()
        }
    }

    // Función para abrir la cámara
    private fun openCamera() {
        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        if (intent.resolveActivity(packageManager) != null) {
            startActivityForResult(intent, REQUEST_IMAGE_CAPTURE)
        } else {
            Toast.makeText(this, "No hay ninguna aplicación que pueda abrir la cámara.", Toast.LENGTH_SHORT).show()
            Log.e("CameraError", "No hay aplicaciones disponibles para abrir la cámara.")
        }
    }

    // Manejo de la respuesta de la cámara
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
            // Captura la imagen
            val imageBitmap = data?.extras?.get("data") as Bitmap
            // Aquí puedes manejar la imagen capturada, como mostrarla en un ImageView
            Toast.makeText(this, "Imagen capturada", Toast.LENGTH_SHORT).show()
            // Por ejemplo, si tienes un ImageView para mostrar la imagen:
            // imageView.setImageBitmap(imageBitmap)
        } else {
            Toast.makeText(this, "No se capturó ninguna imagen", Toast.LENGTH_SHORT).show()
        }
    }

    // Manejo de la respuesta de permisos
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CAMERA_PERMISSION) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permiso concedido, abrir la cámara
                openCamera()
            } else {
                Toast.makeText(this, "Permiso de cámara denegado", Toast.LENGTH_SHORT).show()
            }
        }
    }
}
